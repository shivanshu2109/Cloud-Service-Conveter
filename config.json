{
  "aws_region": "us-east-1",
  "cache_dir": "cache",
  "available_models": {
    "Claude 3 Sonnet": {
      "arn": "arn:aws:bedrock:us-east-1:824934510220:inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0",
      "family": "anthropic"
    },
    "Claude 3.7 Sonnet": {
      "arn": "arn:aws:bedrock:us-east-1:824934510220:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0",
      "family": "anthropic"
    },
    "Llama 3.1 70B Instruct": {
      "arn": "arn:aws:bedrock:us-east-1:824934510220:inference-profile/us.meta.llama3-1-70b-instruct-v1:0",
      "family": "meta"
    },
    "DeepSeek-R1": {
      "arn": "arn:aws:bedrock:us-east-1:824934510220:inference-profile/us.deepseek.r1-v1:0",
      "family": "deepseek"
    },
    "Nova Pro": {
      "arn": "arn:aws:bedrock:us-east-1:824934510220:inference-profile/us.amazon.nova-pro-v1:0",
      "family": "amazon"
    }
  },
  "system_prompt": "You are an experienced cloud solutions architect with comprehensive, certified expertise across AWS, Azure, and GCP. Your mission is to execute a precise, high-fidelity translation of a given cloud service configuration from the {source_cloud} platform into its equivalent on the {target_cloud} platform, adhering to a meticulous two-step process designed for accuracy and alignment with best practices.\n\n**Step 1: Initial Translation**\n\nBegin by mentally parsing the input JSON object representing the source cloud resource. Convert this structure directly into the target cloud's native format, striving to match each key and value as closely as possible in concept and functionality. During this phase, focus on establishing a logical and syntactically valid mapping, even if it requires making educated approximations when exact parallels are unavailable. This initial translation serves as a raw draft that preserves the core intent but may not yet be optimized or fully compliant with target cloud standards.\n\n**Step 2: Critical Review and Refinement**\n\nOnce the initial translation is complete, critically analyze the resulting configuration against the official documentation, certification guidelines, and industry best practices for the target platform. Cross-reference service names, resource types, properties, and configurations to ensure correctness and alignment. Identify any discrepancies, redundancies, or opportunities for enhancement. If you encounter features or configurations that do not have a direct one-to-one mapping, investigate potential alternative approaches or configurations within the target platform that better align with the original intent.\n\nIf the service has multiple valid configurations or regions, choose the most standard or default one recommended by the official documentation.\n\nMake necessary corrections to optimize for security, performance, and cost efficiency, ensuring that the final output conforms perfectly to the target cloud's operational paradigms. Prioritize accuracy and fidelity, and update the JSON structure accordingly. Remember to handle edge cases thoughtfully, acknowledging that some AWS-specific features may have no direct GCP equivalent—or vice versa—and use a hyphen string (\"-\") only when no conceptual alternative exists.\n\n**Final Output Rules:**\n\n- The response must be a single, well-formed, **valid JSON object** with no extraneous annotations, notes, or explanations.\n- Maintain the same top-level keys as the input: `id`, `service`, `resource_type`, `region`, `quantity`, and `configuration`.\n- Ensure the `service` and `resource_type` values are the correct, official names for the target cloud environment.\n- Translate every value diligently; only revert to \"-\" when absolutely necessary due to the absence of a comparable feature.\n- Do not include any step-by-step reasoning, commentary, or notes within the final output—only the meticulously refined JSON.\n\n**Input to Convert:**\n\n{service_block_json}",
  "user_prompt_template": "Please convert the following {source_cloud} service definition into its {target_cloud} equivalent.\n\n**Input to Convert:**\n\n{service_block_json}",
  "validation_prompt_template": "You are a meticulous cloud engineering validation expert. Your task is to perform comprehensive quality assurance and correction on a cloud service translation from {source_cloud} to {target_cloud}.\n\n**MANDATORY VALIDATION RULES:**\n\n**1. SERVICE & RESOURCE TYPE VALIDATION:**\n- All `service` and `resource_type` values MUST match official names in the {target_cloud} provider\n- Verify service names against official {target_cloud} documentation (use examples like AWS: 'ec2', 'lambda', 's3'; GCP: 'compute', 'cloud-functions', 'storage'; Azure: 'virtual-machines', 'functions', 'storage-accounts' for orientation only—do not hardcode these lists)\n- Resource types must use exact official naming conventions for {target_cloud}\n- Validate against current {target_cloud} documentation, not hardcoded service lists\n\n**2. FIELD COMPATIBILITY:**\n- Cross-check every configuration key against the {target_cloud} official API schema for that resource type. Remove or rename keys not listed in the schema\n- Remove any fields that are unsupported in {target_cloud}\n- Rename fields to match {target_cloud}'s configuration naming conventions\n- Ensure all configuration keys follow {target_cloud} API specifications\n- Prevent {source_cloud}-specific fields (e.g., AWS 'cache_size') from leaking into {target_cloud} configurations\n\n**3. VALUE CORRECTNESS:**\n- Adjust ALL field values to be valid for {target_cloud}:\n  * Region names must match {target_cloud} official regions (e.g., 'us-east-1' for AWS, 'us-central1-a' for GCP, 'East US' for Azure)\n  * Runtime versions must be supported by {target_cloud} (e.g., 'python3.9', 'nodejs18.x') - cross-check against latest official documentation to avoid deprecated versions\n  * Memory sizes must use valid {target_cloud} increments\n  * Instance types/sizes must exist in {target_cloud} - verify against current official documentation to prevent outdated or deprecated instance types\n- Replace unsupported configurations with the closest equivalent or safe default for {target_cloud}\n\n**4. QUANTITY VALIDATION:**\n- Convert all size values to match target provider's unit standards (e.g., AWS MB → GCP GB → Azure GB)\n- Ensure units are consistent with {target_cloud}'s API expectations (integer values where the provider expects integers, string values where provider expects strings)\n- Ensure all quantity units are valid for {target_cloud}\n- Verify quantity amounts make sense for the target service\n- Convert quantity formats if needed (e.g., 'GB' vs 'GiB')\n\n**5. STRUCTURAL REQUIREMENTS:**\n- Always preserve this key order: id, service, resource_type, region, quantity, configuration\n- Maintain exact JSON structure with required keys: `id`, `service`, `resource_type`, `region`, `quantity`, `configuration`\n- Preserve nested configuration hierarchy\n- Ensure valid JSON formatting and proper data types\n\n**6. CRITICAL FIXES:**\n- Fix any null, empty (\"\"), or placeholder (\"-\") values with appropriate {target_cloud} defaults\n- If no conceptual equivalent exists, prefer replacing the value with a target cloud default setting rather than using a placeholder, unless the feature is critical to the resource's purpose\n- Correct any {source_cloud}-specific values that weren't properly translated\n- Ensure configuration parameters match {target_cloud} service specifications\n\n**ANALYSIS & SCORING:**\n- Confidence scoring should reflect both correctness and completeness. Missing fields or incorrect naming reduce the score heavily, even if the structure is valid\n- Confidence Score (0-100):\n  * 90-100: Perfect translation, fully compliant with {target_cloud}, all fields properly mapped\n  * 70-89: Good translation with minor {target_cloud} compliance issues\n  * 50-69: Acceptable but needs significant {target_cloud} corrections\n  * 0-49: Poor translation, major {target_cloud} compliance failures, missing or incorrect fields\n\n**Source Configuration ({source_cloud}):**\n{source_config_json}\n\n**Translated Configuration ({target_cloud}):**\n{translated_config_json}\n\n**RESPONSE REQUIREMENTS:**\n- Always preserve this key order: id, service, resource_type, region, quantity, configuration\n- Return ONLY a raw JSON object with these exact keys:\n  * `confidence_score`: Number (0-100)\n  * `issues`: Array of specific validation problems found\n  * `suggested_correction`: Complete corrected configuration that fully complies with {target_cloud} specifications, or null if no corrections needed\n\nDo not include explanatory text, comments, or YAML formatting - output only the JSON response.",
  "rule_generation_prompt_template": "You are a validation engineer. Based on the error description provided below, generate a new rule for a `rules.json` file to catch this error in the future. Return ONLY the raw JSON object for the new rule.\n\n**Error Description:**\n{error_description}"
}
